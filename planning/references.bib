
% ARTICLES (FLUID DYNAMICS)

@article{Brody1996,
author = {Brody, J and Yager, P and Goldstein, R and Austin, R},
doi = {10.1016/S0006-3495(96)79538-3},
file = {:D$\backslash$:/MendeleyPapers/Brody et al./1996/Biotechnology at low Reynolds numbers - 1996.pdf:pdf},
issn = {00063495},
journal = {Biophysical Journal},
month = dec,
number = {6},
pages = {3430--3441},
publisher = {Elsevier},
title = {{Biotechnology at low Reynolds numbers}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S0006349596795383},
volume = {71},
year = {1996}
}

@MISC{haskell_report2010,
    author = {Simon Marlow},
    title = {Haskell 2010 Language Report},
    year = {}
}

@INPROCEEDINGS{HistoryOfHaskell2007,
    author = {Paul Hudak and John Hughes and Simon Peyton Jones and Philip Wadler},
    title = {A history of Haskell: Being lazy with class},
    booktitle = {In Proceedings of the 3rd ACM SIGPLAN Conference on History of Programming Languages (HOPL-III)},
    year = {2007},
    pages = {1--55},
    publisher = {ACM Press}
}

@inproceedings{FindingTheNeedle2009,
  added-at = {2010-10-08T00:00:00.000+0200},
  author = {Allwood, Tristan O. R. and Jones, Simon L. Peyton and Eisenbach, Susan},
  biburl = {http://www.bibsonomy.org/bibtex/237642becf1c0fa5b661f8ae7e98f5024/dblp},
  booktitle = {Haskell},
  TODO______e_denna_necessary?_crossref = {conf/haskell/2009},
  editor = {Weirich, Stephanie},
  ee = {http://doi.acm.org/10.1145/1596638.1596654},
  interhash = {a2f855d51880211b220ecff83b87862e},
  intrahash = {37642becf1c0fa5b661f8ae7e98f5024},
  isbn = {978-1-60558-508-6},
  keywords = {dblp},
  pages = {129-140},
  publisher = {ACM},
  timestamp = {2010-10-08T00:00:00.000+0200},
  title = {Finding the needle: stack traces for GHC.},
  url = {http://dblp.uni-trier.de/db/conf/haskell/haskell2009.html#AllwoodJE09},
  year = 2009
}

@Article{evalapplyjfp06,
   author = {Simon Marlow and Simon {Peyton Jones}},
   title = {Making a fast curry: push/enter vs. eval/apply for higher-order languages},
   journal = {Journal of Functional Programming},
   year = {2006},
   month = {July},
   abstract = {Higher-order languages that encourage currying are typically implemented using one of
two basic evaluation models: push/enter or eval/apply.   Implementors
use their intuition and qualitative judgements
to choose one model or the other.

Our goal in this paper is to provide, for the first time, a more
substantial basis for this choice, based on our qualitative and
quantitative experience of implementing both models in a
state-of-the-art compiler for Haskell.

Our conclusion is simple, and contradicts our initial intuition:
compiled implementations should use eval/apply.
},
   url = {http://community.haskell.org/~simonmar/papers/evalapplyjfp06.pdf},
   pages = {415--449},
   volume = {16},
   number = {4--5}
}


@ Nu vettefan om ONLINE verkligen parsas speciellt
@ONLINE{Doe,
  author = {Doe, Ringo},
  title = {This is a test entry of type {@ONLINE}},
  month = jun,
  year = {2009},
  url = {http://www.test.org/doe/}
}
